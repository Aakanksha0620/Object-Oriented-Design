SOLID DESIGN PRINCIPLES 
———————————————————————


IN COMPUTER PROGRAMMING, SOLID (SINGLE RESPONSIBILITY, OPEN-CLOSED, LISKOV SUBSTITUTION, INTERFACE SEGREGATION AND DEPENDENCY INVERSION) IS A MNEMONIC ACRONYM INTRODUCED BY MICHAEL FEATHERS FOR THE "FIRST FIVE PRINCIPLES" NAMED BY ROBERT C. MARTIN IN THE EARLY 2000S[3] THAT STANDS FOR FIVE BASIC PRINCIPLES OF OBJECT-ORIENTED PROGRAMMING AND DESIGN. THE INTENTION IS THAT THESE PRINCIPLES, WHEN APPLIED TOGETHER, WILL MAKE IT MORE LIKELY THAT A PROGRAMMER WILL CREATE A SYSTEM THAT IS EASY TO MAINTAIN AND EXTEND OVER TIME.[3] THE PRINCIPLES OF SOLID ARE GUIDELINES THAT CAN BE APPLIED WHILE WORKING ON SOFTWARE TO REMOVE CODE SMELLS BY PROVIDING A FRAMEWORK THROUGH WHICH THE PROGRAMMER MAY REFACTOR THE SOFTWARE'S SOURCE CODE UNTIL IT IS BOTH LEGIBLE AND EXTENSIBLE. IT IS PART OF AN OVERALL STRATEGY OF AGILE AND ADAPTIVE SOFTWARE DEVELOPMENT.

	
1. SINGLE RESPONSIBILITY PRINCIPLE (S)
A CLASS SHOULD HAVE ONLY A SINGLE RESPONSIBILITY (I.E. ONLY ONE POTENTIAL CHANGE IN THE SOFTWARE'S SPECIFICATION SHOULD BE ABLE TO AFFECT THE SPECIFICATION OF THE CLASS)

2. OPEN/ CLOSE PRINCIPLE (O)
“SOFTWARE ENTITIES … SHOULD BE OPEN FOR EXTENSION, BUT CLOSED FOR MODIFICATION.”

3. LISKOV SUBSTITUTION PRINCIPLE (L)
“OBJECTS IN A PROGRAM SHOULD BE REPLACEABLE WITH INSTANCES OF THEIR SUBTYPES WITHOUT ALTERING THE CORRECTNESS OF THAT PROGRAM.” SEE ALSO DESIGN BY CONTRACT.

4. INTERFACE SEGREGATION PRINCIPLE (I)
“MANY CLIENT-SPECIFIC INTERFACES ARE BETTER THAN ONE GENERAL-PURPOSE INTERFACE.”

5. DEPENDENCY INVERSION PRINCIPLE (D)
ONE SHOULD DEPEND UPON ABSTRACTIONS, [NOT] CONCRETIONS.